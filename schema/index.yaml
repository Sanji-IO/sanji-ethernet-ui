swagger: '2.0'
info:
  title: Ethernet API
  description: Handle the Ethernet interface(s)
  version: "1.0.0"

schemes:
  - http
  - https
produces:
  - application/json
paths:
  /network/dhcpd:
    get:
      description: Get Overview of DHCP Server information
      responses:
        200:
          description: success
          schema:
            $ref: '#/definitions/DHCPServerCollection'
          examples:
            {
              "application/json": {
                $ref: '#/externalDocs/x-mocks/DHCPServerCollectionExample'
              }
            }
  /network/dns:
    get:
      summary: Information of Current DNS settings
      description: |
        List all current DNS and DNS source.
      responses:
        200:
          description: DNS
          schema:
            $ref: '#/definitions/DNS'
          examples:
            {
              "application/json": {
                $ref: '#/externalDocs/x-mocks/DNS'
              }
            }
  /network/ethernets:
    get:
      summary: Ethernet Interface(s)
      description: |
        The system returns information about the settings of all
        *Ethernet interface(s)*.
      responses:
        200:
          description: An array of Ethernet interface(s)
          schema:
            type: array
            items:
              $ref: '#/definitions/Ethernet'
          examples:
            {
              "application/json": {
                $ref: '#/externalDocs/x-mocks/Ethernets'
              }
            }
    put:
      summary: Ethernet Interface(s)
      description: Update a list of Ethernet interface(s) settings.
      responses:
        200:
          description: OK
          schema:
            type: array
            items:
              $ref: '#/definitions/Ethernet'

  /network/ethernets/{id}:
    parameters:
      - name: id
        in: path
        type: integer
        required: true
    get:
      description: |
        Get settings of indicated Ethernet interface.
      responses:
        200:
          description: An Ethernet interface settings.
          schema:
            $ref: '#/definitions/Ethernet'
          examples:
            {
              "application/json": {
                $ref: '#/externalDocs/x-mocks/Ethernet'
              }
            }
    put:
      summary: Ethernet Interface
      description: Update an Ethernet interface settings.
      parameters:
      - name: body
        in: body
        description: ''
        required: true
        schema:
          $ref: '#/definitions/Ethernet'
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/Ethernet'
          examples:
            {
              "application/json": {
                $ref: '#/externalDocs/x-mocks/Ethernet'
              }
            }

definitions:
  DHCPServer:
    description: DHCP Server configuration
    type: object
    required:
    - name
    - enable
    - netmask
    - startIp
    - endIp
    - domainNameServers
    - domainName
    - leaseTime
    properties:
      avaliable:
        readOnly: true
        type: boolean
        description: |
          DHCP server is avaliable or not (the interface must be "static IP"
          and/or worked as a WiFi AP), default should be false.
      name:
        description: Name of dhcp server
        type: string
        minLength: 1
        maxLength: 255
      enable:
        description: Enable dhcp server
        type: boolean
      netmask:
        description: Netmask of dhcp server
        type: string
        minLength: 7
        maxLength: 15
      startIp:
        description: Range IP start
        type: string
        minLength: 7
        maxLength: 15
      endIp:
        description: Range IP end
        type: string
        minLength: 7
        maxLength: 15
      domainNameServers:
        description: Domain name servers
        type: array
        items:
          type: string
          minLength: 7
          maxLength: 15
      domainName:
        description: Domain name
        type: string
        maxLength: 255
      leaseTime:
        description: Lease time of dhcp pool
        type: integer
        minimum: 60
        maximum: 65535
    example:
      $ref: '#/externalDocs/x-mocks/DHCPServerExample'
  DNS:
    title: DNS
    required:
    - enableFixed
    properties:
      source:
        type: string
        readOnly: true
        description: |
          The current dns corresponging source, may be a network interface or
          `fixed` for fixed DNS (readonly)
      dns:
        type: array
        items:
          type: string
          pattern: ^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$
        readOnly: true
        description: Current DNS setting(s) (readonly).
      enableFixed:
        type: boolean
        description: |
          Using fixed DNS (true) or by interface (false), false if not given.
      fixedDns:
        type: array
        items:
          type: string
          pattern: ^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$
        description: |
          DNS settings if enableFixed is `true`.
    example:
          $ref: '#/externalDocs/x-mocks/DNS'
  Ethernet:
    title: Ethernet
    required:
      - id
      - enable
      - enableDhcp
    properties:
      id:
        type: integer
        description: Identifier of an Ethernet interface.
      enable:
        type: boolean
        description: Set interface UP.
      wan:
        type: boolean
        description: Define the interface type is WAN (`true`) or LAN (`false`)
      name:
        type: string
        readOnly: true
        description: Indicate the interface name.
      enableDhcp:
        type: boolean
        description: Enable (`true`) the dhcp client or using the static IP (`false`).
      ip:
        type: string
        pattern: ^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$
        description: IP address for the Ethernet interface.
      mac:
        type: string
        readOnly: true
        description: The identical MAC address.
      netmask:
        type: string
        pattern: ^(254|252|248|240|224|192|128)\.0\.0\.0|255\.(254|252|248|240|224|192|128|0)\.0\.0|255\.255\.(254|252|248|240|224|192|128|0)\.0|255\.255\.255\.(254|252|248|240|224|192|128|0)
        description: Subnet mask for the Ethernet interface.
      subnet:
        type: string
        readOnly: true
        pattern: ^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$
        description: |
          A subnet (short for "subnetwork") is an identifiably separate part of
          an organization's network.
      broadcast:
        type: string
        readOnly: true
        pattern: ^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$
        description: |
          A broadcast address is a logical address at which all devices
          connected to a multiple-access communications network are enabled
          to receive datagrams.
      gateway:
        type: string
        pattern: ^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$
        description: |
          Gateway is a router or a proxy server that routes between networks.
      dns:
        type: array
        items:
          type: string
          pattern: ^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$
        description: |
          The Domain Name System (DNS) is a hierarchical distributed naming
          system for computers, services, or any resource connected to the
          Internet or a private network.
      status:
        type: boolean
        readOnly: true
        description: |
          Current status for the Ethernet interface, `false` for down and `true` for up.
      restart:
        type: boolean
        readOnly: true
        description: |
          `true` means that view must be restarted after receiving the response.
    example:
          $ref: '#/externalDocs/x-mocks/Ethernet'
  DHCPServerCollection:
    description: Collection of DHCP Servers and overview status
    type: object
    readOnly: true
    properties:
      status:
        description: DHCP Server is enable or not
        type: boolean
      collection:
        description: All of dhcp server instance config
        type: array
        items:
          $ref: '#/definitions/DHCPServer'
    example:
      $ref: '#/externalDocs/x-mocks/DHCPServerCollectionExample'

externalDocs:
  url: '#'
  x-mocks:
    DNS:
      {
        "enableFixed": false,
        "fixedDns": [],
        "source": "eth0",
        "dns": [
          "8.8.8.8",
          "8.8.4.4",
        ]
      }
    Ethernet:
      {
        "id":1,
        "wan":true,
        "name": "eth0",
        "ip": "192.168.3.127",
        "mac": "FF:FF:FF:FF:FF:FF",
        "netmask": "255.255.255.0",
        "subnet": "192.168.3.0",
        "gateway": "192.168.3.254",
        "dns":["8.8.8.8", "8.8.4.4"],
        "status":true,
        "enable":true,
        "enableDhcp":false
      }
    Ethernets:
      [
        {
          "id":1,
          "wan":true,
          "name": "eth0",
          "ip": "192.168.3.1",
          "mac": "FF:FF:FF:FF:FF:FF",
          "netmask": "255.255.255.0",
          "subnet": "192.168.3.0",
          "gateway": "192.168.3.254",
          "dns":["8.8.8.8", "8.8.4.4"],
          "status":true,
          "enable":true,
          "enableDhcp":false
        },
        {
          "id":2,
          "wan":false,
          "name": "eth1",
          "ip": "192.168.100.127",
          "mac": "FF:FF:FF:FF:FF:FF",
          "netmask": "255.255.255.0",
          "subnet": "192.168.100.0",
          "gateway": "192.168.100.254",
          "dns":["8.8.8.8", "8.8.4.4"],
          "status":true,
          "enable":true,
          "enableDhcp":false,
          "restart":true
        }
      ]
    DHCPServerCollectionExample:
      {
        "status": true,
        "collection": [
          {
            "id": 1,
            "name": "eth0",
            "available": true,
            "enable": true,
            "subnet": "192.168.3.0",
            "netmask": "255.255.255.0",
            "startIp": "192.168.3.100",
            "endIp": "192.168.3.150",
            "domainNameServers": [
              "8.8.8.8",
              "1.1.1.1",
              "2.2.2.2"
            ],
            "domainName": "cloud5566",
            "leaseTime": "3600",
            "status": true
          },
          {
            "id": 2,
            "name": "eth1",
            "available": true,
            "enable": true,
            "subnet": "192.168.3.0",
            "netmask": "255.255.255.0",
            "startIp": "192.168.3.100",
            "endIp": "192.168.3.150",
            "domainNameServers": [
              "8.8.8.8",
              "1.1.1.1",
              "2.2.2.2"
            ],
            "domainName": "cloud5566",
            "leaseTime": "3600",
            "status": false
          }
        ]
      }
    DHCPServerExample:
      {
        "id": 1,
        "name": "eth0",
        "available": false,
        "enable": false,
        "subnet": "192.168.3.0",
        "netmask": "255.255.255.0",
        "startIp": "192.168.3.100",
        "endIp": "192.168.3.150",
        "domainNameServers": [
          "8.8.8.8",
          "1.1.1.1",
          "2.2.2.2"
        ],
        "domainName": "cloud5566",
        "leaseTime": "3600"
      }
